{"version":3,"file":"nrrdjs.js","sources":["../src/constants.js","../src/Parser.js","../src/Toolbox.js","../src/index.js"],"sourcesContent":["/**\n * This is the mapping from the NRRD datatype as written in the NRRD header\n * to the JS typed array equivalent.\n */\nconst NRRD_TYPES_TO_TYPEDARRAY = {\n  \"signed char\": Int8Array,\n  \"int8\": Int8Array,\n  \"int8_t\": Int8Array,\n  \"uchar\": Uint8Array,\n  \"unsigned char\": Uint8Array,\n  \"uint8\": Uint8Array,\n  \"uint8_t\": Uint8Array,\n  \"short\": Int16Array,\n  \"short int\": Int16Array,\n  \"signed short\": Int16Array,\n  \"signed short int\": Int16Array,\n  \"int16\": Int16Array,\n  \"int16_t\": Int16Array,\n  \"ushort\": Uint16Array,\n  \"unsigned short\": Uint16Array,\n  \"unsigned short int\": Uint16Array,\n  \"uint16\": Uint16Array,\n  \"uint16_t\": Uint16Array,\n  \"int\": Int32Array,\n  \"signed int\": Int32Array,\n  \"int32\": Int32Array,\n  \"int32_t\": Int32Array,\n  \"uint\": Uint32Array,\n  \"unsigned int\": Uint32Array,\n  \"uint32\": Uint32Array,\n  \"uint32_t\": Uint32Array,\n  \"longlong\": BigInt64Array,           // OK for Node/V8/Chrome but not Firefox\n  \"long long\": BigInt64Array,\n  \"long long int\": BigInt64Array,\n  \"signed long long\": BigInt64Array,\n  \"signed long long int\": BigInt64Array,\n  \"int64\": BigInt64Array,\n  \"int64_t\": BigInt64Array,\n  \"ulonglong\": BigUint64Array,\n  \"unsigned long long\": BigUint64Array,\n  \"unsigned long long int\": BigUint64Array,\n  \"uint64\": BigUint64Array,\n  \"uint64_t\": BigUint64Array,\n  \"float\": Float32Array,\n  \"double\": Float64Array\n}\n\n\n\nconst NRRD_TYPES_TO_VIEW_GET = {\n  \"signed char\": 'getInt8',\n  \"int8\": 'getInt8',\n  \"int8_t\": 'getInt8',\n  \"uchar\": 'getUint8',\n  \"unsigned char\": 'getUint8',\n  \"uint8\": 'getUint8',\n  \"uint8_t\": 'getUint8',\n  \"short\": 'getInt16',\n  \"short int\": 'getInt16',\n  \"signed short\": 'getInt16',\n  \"signed short int\": 'getInt16',\n  \"int16\": 'getInt16',\n  \"int16_t\": 'getInt16',\n  \"ushort\": 'getUint16',\n  \"unsigned short\": 'getUint16',\n  \"unsigned short int\": 'getUint16',\n  \"uint16\": 'getUint16',\n  \"uint16_t\": 'getUint16',\n  \"int\": 'getInt32',\n  \"signed int\": 'getInt32',\n  \"int32\": 'getInt32',\n  \"int32_t\": 'getInt32',\n  \"uint\": 'getUint32',\n  \"unsigned int\": 'getUint32',\n  \"uint32\": 'getUint32',\n  \"uint32_t\": 'getUint32',\n  \"longlong\": null,\n  \"long long\": null,\n  \"long long int\": null,\n  \"signed long long\": null,\n  \"signed long long int\": null,\n  \"int64\": null,\n  \"int64_t\": null,\n  \"ulonglong\": null,\n  \"unsigned long long\": null,\n  \"unsigned long long int\": null,\n  \"uint64\": null,\n  \"uint64_t\": null,\n  \"float\": 'getFloat32',\n  \"double\": 'getFloat64'\n}\n\n\nconst SPACE_TO_SPACEDIMENSIONS = {\n  'right-anterior-superior': 3,\n  'ras': 3,\n  'left-anterior-superior': 3,\n  'las': 3,\n  'left-posterior-superior': 3,\n  'lps': 3,\n  'right-anterior-superior-time': 4,\n  'rast': 4,\n  'left-anterior-superior-time': 4,\n  'last': 4,\n  'left-posterior-superior-time': 4,\n  'lpst': 4,\n  'scanner-xyz': 3,\n  'scanner-xyz-time': 4,\n  '3d-right-handed': 3,\n  '3d-left-handed': 3,\n  '3d-right-handed-time': 4,\n  '3d-left-handed-time': 4\n}\n\n// in NRRD, some \"kinds\" have to respect a certain size. For example, the kind\n// \"quaternion\" has to be of size 4 (xyzw).\n// When the value is 'null', then no enforcement is made.\n// Note: the fields have been turned to lowercase here\nconst KIND_TO_SIZE = {\n  'domain': null,\n  'space': null,\n  'time': null,\n  'list': null,\n  'point': null,\n  'vector': null,\n  'covariant-vector': null,\n  'normal': null,\n  'stub': 1,\n  'scalar': 1,\n  'complex': 2,\n  '2-vector': 2,\n  '3-color': 3,\n  'rgb-color': 3,\n  'hsv-color': 3,\n  'xyz-color': 3,\n  '4-color': 4,\n  'rgba-color': 4,\n  '3-vector': 3,\n  '3-gradient': 3,\n  '3-normal': 3,\n  '4-vector': 4,\n  'quaternion': 4,\n  '2d-symmetric-matrix': 3,\n  '2d-masked-symmetric-matrix': 4,\n  '2d-matrix': 4,\n  '2d-masked-matrix': 4,\n  '3d-symmetric-matrix': 6,\n  '3d-masked-symmetric-matrix': 7,\n  '3d-matrix': 9,\n  '3d-masked-matrix': 10,\n  '???': null\n}\n\nexport {\n  NRRD_TYPES_TO_TYPEDARRAY,\n  NRRD_TYPES_TO_VIEW_GET,\n  SPACE_TO_SPACEDIMENSIONS,\n  KIND_TO_SIZE\n}\n","import pako from 'pako'\nimport {\n  NRRD_TYPES_TO_TYPEDARRAY,\n  NRRD_TYPES_TO_VIEW_GET,\n  SPACE_TO_SPACEDIMENSIONS,\n  KIND_TO_SIZE\n} from './constants'\n\n\n/**\n * Parse a buffer of a NRRD file.\n * Throws an exception if the file is not a proper NRRD file.\n * @param {ArrayBuffer} nrrdBuffer - the NRRD file buffer\n * @param {Object} options - the option object\n * @param {boolean} options.headerOnly - Parses only the header if true, parses header and data if false (default: false)\n * @return {Object} NRRD header and data such as {header: Object, data: TypedArray }\n */\nexport default function parse(nrrdBuffer, options = {}){\n  let magicControl = 'NRRD000'\n  let magicTest = String.fromCharCode.apply(null, new Uint8Array(nrrdBuffer, 0, magicControl.length))\n\n  if(magicControl !== magicTest){\n    throw new Error('This file is not a NRRD file')\n  }\n\n  let {header, dataByteOffset} = parseHeader(nrrdBuffer)\n\n  if('headerOnly' in options && options.headerOnly ){\n    return {header: header, data: null}\n  }\n\n  let data = parseData(nrrdBuffer, header, dataByteOffset)\n  return {header: header, data: data}\n}\n\n\n/**\n * @private\n * Parses the header\n */\nfunction parseHeader(nrrdBuffer){\n  let byteArrayHeader = []\n  let dataStartPosition = null\n  let view = new DataView(nrrdBuffer)\n\n  for(let i=0; i<nrrdBuffer.byteLength; i++){\n    byteArrayHeader.push(String.fromCharCode(view.getUint8(i)))\n\n    if(i>0 && byteArrayHeader[i-1] === '\\n' && byteArrayHeader[i] === '\\n'){\n      dataStartPosition = i + 1\n      break\n    }\n  }\n\n  if(dataStartPosition === null){\n    throw new Error('The NRRD header is corrupted.')\n  }\n\n  let comments = []\n\n  let headerLines = byteArrayHeader.join('').trim().split(/\\r\\n|\\n/).map(l => l.trim())\n\n  let preMap = headerLines.slice(1)\n  .filter( s => { // removing empty lines\n    return s.length > 0\n  })\n  .filter( s => { // removing comments\n    if(s[0] === '#'){\n      comments.push(s.slice(1).trim())\n    }\n    return (s[0] !== '#')\n  })\n  .map( s => {\n    let keyVal = s.split(':')\n    return {\n      key: keyVal[0].trim(),\n      val: keyVal[1].trim()\n    }\n  })\n\n  let nrrdHeader = {}\n\n  preMap.forEach( field => {\n    nrrdHeader[field.key] = field.val\n  })\n\n  // parsing each fields of the header\n  if(nrrdHeader['sizes']){\n    nrrdHeader['sizes'] = nrrdHeader.sizes.split(/\\s+/).map( n => parseInt(n))\n  }\n\n  if(nrrdHeader['space dimension']){\n    nrrdHeader['space dimension'] = parseInt(nrrdHeader['space dimension'])\n  }\n\n  if(nrrdHeader['space']){\n    nrrdHeader['space dimension'] = SPACE_TO_SPACEDIMENSIONS[nrrdHeader['space'].toLowerCase()]\n  }\n\n  if(nrrdHeader['dimension']){\n    nrrdHeader['dimension'] = parseInt(nrrdHeader['dimension'])\n  }\n\n  if(nrrdHeader['space directions']){\n    nrrdHeader['space directions'] = nrrdHeader['space directions'].split(/\\s+/)\n        .map(triple => {\n          if(triple.trim() === 'none'){\n            return null\n          }\n          return triple.slice(1, triple.length-1)\n                       .split(',')\n                       .map(n => parseFloat(n))\n        })\n\n    if(nrrdHeader['space directions'].length !== nrrdHeader['dimension']){\n      throw new Error('\"space direction\" property has to contain as many elements as dimensions. Non-spatial dimesnsions must be refered as \"none\". See http://teem.sourceforge.net/nrrd/format.html#spacedirections for more info.')\n    }\n  }\n\n  if(nrrdHeader['space units']){\n    nrrdHeader['space units'] = nrrdHeader['space units'].split(/\\s+/)\n  }\n\n  if(nrrdHeader['space origin']){\n    nrrdHeader['space origin'] = nrrdHeader['space origin']\n        .slice(1, nrrdHeader['space origin'].length-1)\n        .split(',')\n        .map(n => parseFloat(n))\n  }\n\n  if(nrrdHeader['measurement frame']){\n    nrrdHeader['measurement frame'] = nrrdHeader['measurement frame'].split(/\\s+/)\n        .map(triple => {\n          if(triple.trim() === 'none'){\n            return null\n          }\n          return triple.slice(1, triple.length-1)\n                       .split(',')\n                       .map(n => parseFloat(n))\n        })\n  }\n\n  if(nrrdHeader['kinds']){\n    nrrdHeader['kinds'] = nrrdHeader['kinds'].split(/\\s+/)\n\n    if(nrrdHeader['kinds'].length !== nrrdHeader['sizes'].length){\n      throw new Error(`The \"kinds\" property is expected to have has many elements as the \"size\" property.`)\n    }\n\n    nrrdHeader['kinds'].forEach((k, i) => {\n      let expectedLength = KIND_TO_SIZE[k.toLowerCase()]\n      let foundLength = nrrdHeader['sizes'][i]\n      if(expectedLength !== null && expectedLength !== foundLength){\n        throw new Error(`The kind \"${k}\" expect a size of ${expectedLength} but ${foundLength} found`)\n      }\n    })\n\n  }\n\n  if(nrrdHeader['min']){\n    nrrdHeader['min'] = parseFloat(nrrdHeader['min'])\n  }\n\n  if(nrrdHeader['max']){\n    nrrdHeader['max'] = parseFloat(nrrdHeader['max'])\n  }\n\n  if(nrrdHeader['old min']){\n    nrrdHeader['old min'] = parseFloat(nrrdHeader['old min'])\n  }\n\n  if(nrrdHeader['old max']){\n    nrrdHeader['old max'] = parseFloat(nrrdHeader['old max'])\n  }\n\n  if(nrrdHeader['spacings']){\n    nrrdHeader['spacings'] = nrrdHeader['spacings'].split(/\\s+/).map(n => parseFloat(n))\n  }\n\n  if(nrrdHeader['thicknesses']){\n    nrrdHeader['thicknesses'] = nrrdHeader['thicknesses'].split(/\\s+/).map(n => parseFloat(n))\n  }\n\n  if(nrrdHeader['axis mins']){\n    nrrdHeader['axis mins'] = nrrdHeader['axis mins'].split(/\\s+/).map(n => parseFloat(n))\n  }\n\n  if(nrrdHeader['axismins']){\n    nrrdHeader['axismins'] = nrrdHeader['axismins'].split(/\\s+/).map(n => parseFloat(n))\n  }\n\n  if(nrrdHeader['axis maxs']){\n    nrrdHeader['axis maxs'] = nrrdHeader['axis maxs'].split(/\\s+/).map(n => parseFloat(n))\n  }\n\n  if(nrrdHeader['axismaxs']){\n    nrrdHeader['axismaxs'] = nrrdHeader['axismaxs'].split(/\\s+/).map(n => parseFloat(n))\n  }\n\n  if(nrrdHeader['centers']){\n    nrrdHeader['centers'] = nrrdHeader['centers'].split(/\\s+/).map(mode => {\n      if(mode === 'cell' || mode === 'node'){\n        return mode\n      } else {\n        return null\n      }\n    })\n  }\n\n\n  if(nrrdHeader['labels']){\n    nrrdHeader['labels'] = nrrdHeader['labels'].split(/\\s+/)\n  }\n\n  // some additional metadata that are not part of the header will be added here\n  nrrdHeader.extra = {}\n\n  // adding the comments from lines starting with #\n  nrrdHeader.extra.comments = comments\n\n  // having the stride can be handy.\n  nrrdHeader.extra.stride = [1]\n  for(let i=1; i<nrrdHeader.sizes.length; i++){\n    nrrdHeader.extra.stride.push(nrrdHeader.extra.stride[i-1] * nrrdHeader.sizes[i-1])\n  }\n\n  return {\n    header: nrrdHeader,\n    dataByteOffset: dataStartPosition\n  }\n}\n\n/**\n * @private\n * Parses the data\n */\nfunction parseData(nrrdBuffer, header, dataByteOffset){\n  let dataBuffer = null\n  let arrayType = NRRD_TYPES_TO_TYPEDARRAY[header.type]\n  let nbElementsFromHeader = header.sizes.reduce((prev, curr) => prev * curr)\n  let min = +Infinity\n  let max = -Infinity\n  let data = null\n\n  let isTextEncoded = header.encoding === 'ascii' || header.encoding === 'txt' || header.encoding === 'text'\n\n  if(header.encoding === 'raw'){\n    dataBuffer = nrrdBuffer.slice(dataByteOffset)\n  } else if(isTextEncoded){\n    let numbers = String.fromCharCode.apply(null, new Uint8Array(nrrdBuffer, dataByteOffset))\n              .split(/\\r\\n|\\n|\\s/)\n              .map(s => s.trim())\n              .filter(s => s !== '')\n              .map(s => {\n                let numValue = parseFloat(s)\n                min = Math.min(min, numValue)\n                max = Math.max(max, numValue)\n                return numValue\n              })\n    data = new arrayType(numbers)\n  } else if(header.encoding === 'gzip' || header.encoding === 'gz'){\n    dataBuffer = pako.inflate(new Uint8Array(nrrdBuffer).slice(dataByteOffset)).buffer\n  } else {\n    throw new Error('Only \"raw\", \"ascii\" and \"gzip\" encoding are supported.')\n  }\n\n  if(isTextEncoded){\n    if(nbElementsFromHeader !== data.length){\n      throw new Error('Unconsistency in data buffer length')\n    }\n  } else {\n    let nbElementsFromBufferAndType = dataBuffer.byteLength / arrayType.BYTES_PER_ELEMENT\n\n    if(nbElementsFromHeader !== nbElementsFromBufferAndType){\n      throw new Error('Unconsistency in data buffer length')\n    }\n\n    data = new arrayType(nbElementsFromHeader)\n    let dataView = new DataView(dataBuffer)\n    let viewMethod = NRRD_TYPES_TO_VIEW_GET[header.type]\n    let littleEndian = header.endian === 'little' ? true : false\n\n    for(let i=0; i<nbElementsFromHeader; i++){\n      data[i] = dataView[viewMethod](i * arrayType.BYTES_PER_ELEMENT, littleEndian)\n      min = Math.min(min, data[i])\n      max = Math.max(max, data[i])\n    }\n  }\n\n  header.extra.min = min\n  header.extra.max = max\n  return data\n}\n\n\n\n\n// TODO: find a way to know the nb of componenents per voxel.\n// We could use the presence of \"none\" in the prop \"space direction\" and the prop sizes\n","import * as glMatrix from 'gl-matrix'\n\n/**\n * The Toolbox is a set of static methods to extract some data from a parsed NRRD\n * using the `header` and/or the `data` as returned by `nrrdjs.parse(...)`.\n *\n * The NRRD format does not make any assumption about the naming of the axis\n * (X, Y, Z, A, B, C, etc.) but for the sake of accessibility, the Toolbox assumes\n * that if there is more than 1 components per voxel (ex: RGB), they are encoded\n * on the fastest axis. Otherwise:\n * - The axis called `X` is encoded on the fastest axis\n * - The axis called `Z` is encoded on the slowest axis\n * - The axis called `Y` is encoded in between\n * - The time axis, if any, is even slower than `Z`\n *\n * Note: the fast axis is the one where element along it are contiguous on the buffer (stride: 1)\n */\nclass Toolbox {\n\n  /**\n   * Get the number of components per voxel. For example, for a RGB volume,\n   * the ncpv is 3.\n   * @param {object} header - the header object as returned by the parser\n   * @return {number}\n   */\n  static getNumberOfComponentPerVoxel(header){\n    if(header['dimension'] === header['space dimension'] ||\n       header['space directions'][0] !== null){\n      return 1\n    }\n\n    // when the first 'space directions' is 'none' it means the fastest axis\n    // is the components per pixe (rgb, vector, quat, etc.)\n    return header['sizes'][0]\n  }\n\n\n  /**\n   * Get the number of time samples for this volume. If it's not a time sequence,\n   * then there is only a single time sample.\n   * @param {object} header - the header object as returned by the parser\n   * @return {number}\n   */\n  static getNumberOfTimeSamples(header){\n    if(header['dimension'] === header['space dimension'] ||\n       header['space directions'][header['space directions'].length-1] !== null){\n      return 1\n    }\n\n    return header['sizes'][header['sizes'].length-1]\n  }\n\n\n  static transposeSlice(slice){\n    let data = new slice.data.constructor(slice.data.length)\n\n    // x and y here of input\n    for(let y=0; y<slice.height; y++){\n      for(let x=0; x<slice.width; x++){\n        let index1Din = y * slice.width + x\n        let index1Dout = x * slice.height + y\n        data[index1Dout] = slice.data[index1Din]\n      }\n    }\n\n    return {\n      width: slice.height,\n      height: slice.width,\n      ncpv: slice,\n      data: data\n    }\n  }\n\n\n  /**\n   * Extract a slice of the XY plane in voxel coordinates. The horizontal axis of the\n   * 2D slice is along the X axis of the volume, the vertical axis on the 2D slice is\n   * along the Y axis of the volume, origin is at top-left.\n   * @param {TypedArray} data - the volumetric data\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @param {Number} sliceIndex - index of the slice\n   * @return {Object} as {width: Number, height: Number, data: TypedArray} where the data is\n   * of the same type as the volume buffer.\n   */\n  static getSliceXY(data, header, sliceIndex){\n    if(sliceIndex < 0 || sliceIndex >= header.sizes[2]){\n      throw new Error(`The slice index is out of bound. Must be in [0, ${header.sizes[2]-1}]`)\n    }\n\n    let ncpv = Toolbox.getNumberOfComponentPerVoxel(header)\n    let sliceStride = header.sizes[0] * header.sizes[1]\n    let byteOffset = ncpv * sliceIndex * sliceStride * data.BYTES_PER_ELEMENT\n    let nbElem = sliceStride * ncpv\n    let output = new data.constructor(data.buffer, byteOffset, nbElem)\n    return {\n      width: header.sizes[0],\n      height: header.sizes[1],\n      ncpv: ncpv,\n      data: output\n    }\n  }\n\n\n  static getSliceYX(data, header, sliceIndex){\n    return Toolbox.transposeSlice(Toolbox.getSliceXY(data, header, sliceIndex))\n  }\n\n\n\n\n  /**\n   * Extract a slice of the XZ plane in voxel coordinates. The horizontal axis of the\n   * 2D slice is along the X axis of the volume, the vertical axis on the 2D slice is\n   * along the Z axis of the volume, origin is at top-left.\n   * @param {TypedArray} data - the volumetric data\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @param {Number} sliceIndex - index of the slice\n   * @return {Object} as {width: Number, height: Number, data: TypedArray} where the data is\n   * of the same type as the volume buffer.\n   */\n  static getSliceXZ(data, header, sliceIndex){\n    // TODO add NCPP\n    let outputWidth = header.sizes[0]\n    let outputHeight = header.sizes[2]\n    let ncpv = Toolbox.getNumberOfComponentPerVoxel(header)\n    let output = new data.constructor(outputWidth * outputHeight * ncpv)\n    let tempData = []\n\n    for(let j=0; j<outputHeight; j++){\n      let byteOffset = Toolbox.getIndex1D(header, 0, sliceIndex, j) * data.BYTES_PER_ELEMENT\n      let row = new data.constructor(data.buffer, byteOffset, outputWidth * ncpv)\n      output.set(row, j * outputWidth * ncpv)\n    }\n\n    return {\n      width: header.sizes[0],\n      height: header.sizes[2],\n      ncpv: ncpv,\n      data: output\n    }\n  }\n\n\n  static getSliceZX(data, header, sliceIndex){\n    return Toolbox.transposeSlice(Toolbox.getSliceYZ(data, header, sliceIndex))\n  }\n\n  /**\n   * Extract a slice of the YZ plane in voxel coordinates. The horizontal axis of the\n   * 2D slice is along the Y axis of the volume, the vertical axis on the 2D slice is\n   * along the Z axis of the volume, origin is at top-left.\n   * @param {TypedArray} data - the volumetric data\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @param {Number} sliceIndex - index of the slice\n   * @return {Object} as {width: Number, height: Number, data: TypedArray} where the data is\n   * of the same type as the volume buffer.\n   */\n  static getSliceYZ(data, header, sliceIndex){\n    // TODO add NCPP\n    let outputWidth = header.sizes[1]\n    let outputHeight = header.sizes[2]\n    let ncpv = Toolbox.getNumberOfComponentPerVoxel(header)\n    let output = new data.constructor(outputWidth * outputHeight * ncpv)\n    let counter = 0\n\n    // doing that on ncpv = 1 is much faster than using a generic method so we separate.\n    // This is due to slicing on YZ planes not being able to leverage any buffer connexity\n    if(ncpv === 1){\n      for(let j=0; j<outputHeight; j++){\n        for(let i=0; i<outputWidth; i++){\n          let index1D = sliceIndex * header.extra.stride[0] + i * header.extra.stride[1] + j * header.extra.stride[2]\n          output[counter] = data[index1D]\n          counter ++\n        }\n      }\n    } else {\n      for(let j=0; j<outputHeight; j++){\n        for(let i=0; i<outputWidth; i++){\n          let index1D = (sliceIndex * header.extra.stride[0] + i * header.extra.stride[1] + j * header.extra.stride[2]) * ncpv\n          let byteOffset = index1D * data.BYTES_PER_ELEMENT\n          let spectrum = new data.constructor(data.buffer, byteOffset, ncpv)\n          output.set( spectrum, counter )\n          counter += ncpv\n        }\n      }\n    }\n\n    return {\n      width: header.sizes[1],\n      height: header.sizes[2],\n      ncpv: ncpv,\n      data: output\n    }\n  }\n\n\n  static getSliceZY(data, header, sliceIndex){\n    return Toolbox.transposeSlice(Toolbox.getSliceYZ(data, header, sliceIndex))\n  }\n\n\n  /**\n   * Get the value at the position (x, y, z) in voxel coordinates.\n   * @param {TypedArray} data - the volumetric data\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @param {Number} x - the x position (fastest varying axis)\n   * @param {Number} y - the y position\n   * @param {Number} z - the z position (slowest varying)\n   * @return {Array} as [v] because of compatibility to multiple components per voxel\n   */\n  static getValue(data, header, x, y, z){\n    if(x < 0 || x >= header.sizes[0] ||\n       y < 0 || y >= header.sizes[1] ||\n       z < 0 || z >= header.sizes[2]){\n      throw new Error(`The position is out of range.`)\n    }\n    let ncpv = Toolbox.getNumberOfComponentPerVoxel(header)\n    let index1D = (x * header.extra.stride[0] + y * header.extra.stride[1] + z * header.extra.stride[2]) * ncpv\n    // return data[index1D]\n    return data.slice(index1D, index1D + ncpv)\n  }\n\n\n  /**\n   * Get the 1D index within the buffer for the given (x, y, z) in voxel coordinates\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @param {Number} x - the x position (fastest varying axis)\n   * @param {Number} y - the y position\n   * @param {Number} z - the z position (slowest varying)\n   * @param {Number} value at this position in 1D buffer\n   */\n  static getIndex1D(header, x, y, z){\n    if(x < 0 || x >= header.sizes[0] ||\n       y < 0 || y >= header.sizes[1] ||\n       z < 0 || z >= header.sizes[2]){\n      throw new Error(`The position is out of range.`)\n    }\n    let ncpv = Toolbox.getNumberOfComponentPerVoxel(header)\n    return (x * header.extra.stride[0] + y * header.extra.stride[1] + z * header.extra.stride[2]) * ncpv\n  }\n\n\n  /**\n   * Get the affine matrix for converting voxel coordinates into world/subject coordinates\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @return {Float32Array} the matrix as a 4x4 column major\n   */\n  static getVoxelToWorldMatrix(header){\n    let offset = 'space origin' in header ? header['space origin'] : [0, 0, 0]\n    let sc = 'space directions' in header ?\n                header['space directions'].filter(v => v !== null) :\n                [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ]\n    let v2w = glMatrix.mat4.fromValues(sc[0][0], sc[0][1], sc[0][2], 0,\n                                       sc[1][0], sc[1][1], sc[1][2], 0,\n                                       sc[2][0], sc[2][1], sc[2][2], 0,\n                                       offset[0], offset[1], offset[2], 1)\n    return v2w\n  }\n\n\n  /**\n   * Get the affine matrix for converting world/subject coordinates into voxel coordinates\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @return {Float32Array} the matrix as a 4x4 column major\n   */\n  static getWorldToVoxelMatrix(header){\n    let v2w = Toolbox.getVoxelToWorldMatrix(header)\n    let w2v = glMatrix.mat4.create()\n    glMatrix.mat4.invert(w2v, v2w)\n    return w2v\n  }\n\n\n  /**\n   * Get the position voxel coordinates providing a position in world coordinates\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @param {Number} x - the x position (fastest varying axis)\n   * @param {Number} y - the y position\n   * @param {Number} z - the z position (slowest varying)\n   * @return {Array} as [x, y, z]\n   */\n  static getVoxelPositionFromWorldPosition(header, x, y, z){\n    let worldPos = glMatrix.vec3.fromValues(x, y, z)\n    let w2v = Toolbox.getWorldToVoxelMatrix(header)\n    let voxelPos = glMatrix.vec3.create()\n    glMatrix.vec3.transformMat4(voxelPos, worldPos, w2v)\n    return voxelPos.map(n => Math.round(n))\n  }\n\n\n  /**\n   * Get the value at the given world coordinates.\n   * Note: the voxel coordinates is rounded\n   * @param {TypedArray} data - the volumetric data\n   * @param {Object} header - the header object corresponding to the NRRD file\n   * @param {Number} x - the x position (fastest varying axis)\n   * @param {Number} y - the y position\n   * @param {Number} z - the z position (slowest varying)\n   * @return {Array} as [v] because of compatibility to multiple components per voxel\n   */\n  static getWorldValue(data, header, x, y, z){\n    let voxelPosition = Toolbox.getVoxelPositionFromWorldPosition(header, x, y, z)\n    return Toolbox.getValue(data, header, ...voxelPosition)\n  }\n\n\n}\n\n\nexport default Toolbox\n","import parse from './Parser'\nimport Toolbox from './Toolbox'\n\nexport default ({\n  parse,\n  Toolbox\n})\n"],"names":["glMatrix.mat4","glMatrix.vec3"],"mappings":"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"}